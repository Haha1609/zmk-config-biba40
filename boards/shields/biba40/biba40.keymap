/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

 #include <behaviors.dtsi>
 #include <dt-bindings/zmk/keys.h>
 #include <dt-bindings/zmk/bt.h>
 #include <dt-bindings/zmk/rgb.h>
 #include <dt-bindings/zmk/ext_power.h>
 #include <dt-bindings/zmk/outputs.h>

 #define DEFAULT 0
 #define LOWER  1
 #define RAISE  2
 #define ADJUST 3

/* NOTE: At the time of the creation of this keymap, there are no specified codes for 'eisuu' and 'kana' input in ZMK.
However, 'LANG1' and 'LANG2' are fully-functioning candidates for 'kana' and 'eisuu' input respectively.
As such, those are in use within the default layer at this time.*/

/ {
       keymap {
              compatible = "zmk,keymap";

              default_layer {
 // ---------------------------------------------------------------------------------------------------------------------------------
 // |  TAB   |   Q    |   W    |   E    |   R    |   T    |                                      |   Y    |   U    |   I    |   O    |   P    |  BSPC  |
 // |  CTRL  |   A    |   S    |   D    |   F    |   G    |                                      |   H    |   J    |   K    |   L    |   ;    |   "    |
 // |  SHIFT |   Z    |   X    |   C    |   V    |   B    |                                      |   N    |   M    |   ,    |   .    |   UP   |  ENTER |
 // | ADJUST |  CTRL  |  LGUI  |  LALT  | LOWER  | SPACE  |                                      | SPACE  |  RAISE |  SLASH |  LEFT  |  DOWN  |  RIGHT |
                     bindings = <
       &kp ESC    &kp Q     &kp W    &kp E    &kp R     &kp T                                  &kp Y     &kp U     &kp I      &kp O      &kp P     &kp BSPC
       &kp TAB    &kp A     &kp S    &kp D    &kp F     &kp G                                  &kp H     &kp J     &kp K      &kp L      &kp SEMI  &kp DQT
       &kp LSHFT  &kp Z     &kp X    &kp C    &kp V     &kp B                                  &kp N     &kp M     &kp COMMA  &kp PERIOD &kp UP    &kp ENTER
       &mo ADJUST &kp LCTRL &kp LGUI &kp LALT &mo LOWER &kp SPACE                              &kp SPACE &mo RAISE &kp SLASH  &kp LEFT   &kp DOWN  &kp RIGHT
                     >;
              };
              lower_layer {
 // ---------------------------------------------------------------------------------------------------------------------------------
 // |  `   |  1   |  2   |  3   |  4   |  5   |                                  |  6   |  7   |  8   |  9   |  0   | BSPC |
 // |      |      |      |      |      |      |                                  |      |  4   |  5   |  6   |  -   |   +  |
 // |      |      |      |      |      |      |                                  |      |  1   |  2   |  3   |VOL U | ENTER|
 // |      |      |      |      |      |      |                                  |      |      |  0   |      |VOL D |      |
                     bindings = <
       &kp GRAVE &kp N1 &kp N2 &kp N3 &kp N4  &kp N5                       &kp N6  &kp N7    &kp N8     &kp N9       &kp N0       &kp BSPC
       &trans    &trans   &trans &trans   &trans   &trans                             &trans    &kp N4 &kp N5  &kp N6 &kp MINUS &kp PLUS
       &trans    &trans   &trans &trans   &trans   &trans                             &trans    &kp N1    &kp N2    &kp N3 &kp C_VOL_UP  &kp ENTER
       &trans    &trans   &trans &trans   &trans   &trans                             &trans    &trans    &kp N0    &trans   &kp C_VOL_DN   &trans
                     >;
              };
              raise_layer {
 // ---------------------------------------------------------------------------------------------------------------------------------
 // |   ~   |   !   |   @   |   #   |   $   |   %   |                                    |   ^   |   &   |   *   |   (   |   )   |  DEL  |
 // |       |       |       |       |       |       |                                    |       |   -   |   =   |   [   |   ]   |   \   |
 // |       |       |       |       |       |       |                                    |       |       |       | LBKT  | RBKT  |       |
 // |       |       |       |       |       |       |                                    |       |       |       | LT    | GT    | PLAY  |
                     bindings = <
       &kp TILDE &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT               &kp CARET &kp AMPS  &kp ASTRK &kp LPAR &kp RPAR &kp DEL
       &trans    &trans &trans &trans &trans  &trans                       &trans  &kp MINUS &kp PLUS  &kp LBRC     &kp RBRC     &kp PIPE
       &kp SHIFT    &kp F7 &kp F8 &kp F9 &kp F10 &kp F11                      &trans &kp UNDER    &trans  &kp LBKT   &kp RBKT    &trans
       &trans    &kp CAPS &trans &trans &trans  &trans                       &trans  &trans    &trans &kp LT &kp RT &trans
                     >;
              };
              adjust_layer {
 // ---------------------------------------------------------------------------------------------------------------------------------
 // |  BT CLR  | BT SEL0  | BT SEL1  | BT SEL2  | BGT SEL3 | BT SEL4  |                                          | RGB EFF+ | RGB HUE+ | RGB SAT+ | RGB SPD+ | RGB BRI+ | RGB TOG  |
 // |  BT NXT  | OUT TOG  | OUT USB  | OUT BLE  |          |          |                                          | RGB EFF- | RGB HUE- | RGB SAT- | RGB SPD- | RGB BRI- |          |
 // |  BT PRV  |BT_CLR_ALL|          |          |          |          |    {     |                    |    }     |          |          |          |          |          |          |
 // |          |          |          |          |          |          |          |                    |          |          |          |          |          |          |          |
                     bindings = <
       &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4                          &rgb_ug RGB_EFF &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_SPI &rgb_ug RGB_BRI &rgb_ug RGB_TOG
       &bt BT_NXT &out OUT_TOG &out OUT_USB &out OUT_BLE &trans       &trans                                &rgb_ug RGB_EFR &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_SPD &rgb_ug RGB_BRD &trans
       &bt BT_PRV &bt BT_CLR_ALL       &trans       &trans       &trans       &trans                                &trans          &trans          &trans          &trans          &trans          &trans
       &trans     &trans       &trans       &trans       &trans       &trans                                &trans          &trans          &trans          &trans          &trans          &trans
                     >;
              };
       };
};